import pandas as pd
from sklearn.model_selection import train_test_split

# read file and set everything to lowercase
df = pd.read_csv('dialog_acts.dat') 
df.columns =['dialog']
df = df.astype(str)
df['dialog'].str.lower()

# make two columns with 'dialog act' and 'utterance content'
df['dialog act'] = df['dialog'].str.split(' ', 1).str[0]  # Part before the space
df['utterance content'] = df['dialog'].str.split(' ', 1).str[1]  # Part after the space


# BASE-LINE 2: KEYWORD MATCHING
df_sum = df.groupby('dialog act', as_index=False)['utterance content'].agg(' '.join)

total_word_count = {}

def count_word_frequency(text):
    words = text.split()
    word_count = {}
    for word in words:
        word_count[word] = word_count.get(word, 0) + 1
    return word_count

for index, row in df_sum.iterrows():
    text = row['utterance content']
    word_dict = count_word_frequency(text)
    sorted_dict = dict(sorted(word_dict.items(), key=lambda item: item[1], reverse=True))
    top_10_items = list(sorted_dict.items())[:10]
    print(f"Dialog Act: {row['dialog act']}")
    print("Top 10 words and frequencies:")
    print(top_10_items)
    print() 

df_keywords = {
    'ack': ['okay','um','kay'],
    'affirm': ['yes', 'right'],
    'bye': ['bye', 'thank you'],
    'confirm':['it is', 'it', 'is'],
    'deny': ['wrong', 'want', 'dont'],
    'hello': ['hi', 'hello'],
    'inform': ['food', 'restaurant', 'town'],
    'negate': ['no'],
    'null': ['noise', 'sil', 'unintelligible'],
    'repeat': ['repeat', 'back', 'again'],
    'reqalts': ['how', 'about', 'anything', 'else'],
    'reqmore': ['more'],
    'request': ['what is', 'address', 'whats', 'phone'],
    'restart': ['start over', 'reset'],
    'thankyou': ['thank you', 'bye', 'good', 'goodbye', 'okay']
}

class baseline2:
    def __init__(self, dataset):
        self.data = dataset

    def classify(self, sentence):
        for dialog_act, keywords in df_keywords.items():
            for keyword in keywords:
                if keyword in sentence:
                    return dialog_act
        return 'unknown'

    def evaluate(self, X_test, y_test):
        correct = 0
        for i in range(len(X_test)):
            prediction = self.classify(X_test.iloc[i]['utterance content'])
            if prediction == y_test.iloc[i]:
                correct += 1
        return correct / len(X_test)
    

# Split the dataset into training and testing sets
X_train, X_test = train_test_split(df, test_size=0.15, random_state=42)

# Instantiate and train the classifier
classifier = baseline2(X_train)

# Test the performance of the classifier
# Assuming the dataset has a 'dialog act' column for the correct labels
accuracy = classifier.evaluate(X_test, X_test['dialog act'])
print(f"Accuracy: {accuracy:.2f}")
    'request': ['what is', 'address', 'whats', 'phone'],
    'restart': ['start over', 'reset'],
    'thankyou': ['thank you', 'bye', 'good', 'goodbye', 'okay']
}
